# -*- coding: utf-8 -*-
"""Project_F_DataScience.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aDseMbpss1yOqbH8_2gHvradoywT-a2J

# **Descriptive Statistics**

**Investigation 1: Screen Time Overview**
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset2
dataset2 = pd.read_csv('/content/sample_data/dataset2.csv')

# Calculate mean and median screen time for each activity
mean_screen_time = dataset2[['C_we', 'C_wk', 'G_we', 'G_wk', 'S_we', 'S_wk', 'T_we', 'T_wk']].mean()
median_screen_time = dataset2[['C_we', 'C_wk', 'G_we', 'G_wk', 'S_we', 'S_wk', 'T_we', 'T_wk']].median()

print("Mean Screen Time:\n", mean_screen_time)
print("\nMedian Screen Time:\n", median_screen_time)

# Visualization: Boxplots for screen time during weekdays vs weekends
fig, axs = plt.subplots(2, 2, figsize=(10, 8))
sns.boxplot(data=dataset2[['C_we', 'C_wk']], ax=axs[0, 0]).set_title('Computer Use (Weekend vs Weekday)')
sns.boxplot(data=dataset2[['G_we', 'G_wk']], ax=axs[0, 1]).set_title('Video Games (Weekend vs Weekday)')
sns.boxplot(data=dataset2[['S_we', 'S_wk']], ax=axs[1, 0]).set_title('Smartphone Use (Weekend vs Weekday)')
sns.boxplot(data=dataset2[['T_we', 'T_wk']], ax=axs[1, 1]).set_title('TV Watching (Weekend vs Weekday)')
plt.tight_layout()
plt.show()

"""**Investigation 2: Gender Differences in Well-being**"""

import pandas as pd
import matplotlib.pyplot as plt

# Load dataset1 and dataset3
dataset3 = pd.read_csv('/content/sample_data/dataset3.csv')
dataset1 = pd.read_csv('/content/sample_data/dataset1.csv')

# Merge dataset1 and dataset3 on ID to include gender
merged_data = pd.merge(dataset1[['ID', 'gender']], dataset3, on='ID')

# Check which columns are present in the merged dataset
print("Columns available in merged_data:")
print(merged_data.columns)

# List of well-being columns (use the correct column names from the dataset)
wellbeing_columns = ['Optm', 'Relx', 'Intp', 'Engs', 'Dealpr', 'Thkclr', 'Goodme', 'Clsep', 'Conf', 'Mkmind', 'Loved', 'Intthg', 'Cheer']

# Filter out columns that are not in the dataset
available_columns = [col for col in wellbeing_columns if col in merged_data.columns]

# Calculate mean well-being scores by gender
mean_wellbeing_by_gender = merged_data.groupby('gender').mean()

# Display the available well-being scores
print(mean_wellbeing_by_gender[available_columns])

# Visualization: Barplot for well-being scores by gender
plt.figure(figsize=(10, 6))
mean_wellbeing_by_gender[available_columns].T.plot(kind='bar', figsize=(10, 6))
plt.title('Average Well-being Scores by Gender')
plt.ylabel('Mean Score')
plt.show()

"""# **Inferential Statistics**

**Investigation 1: Minority Status and Screen Time (T-test)**
"""

from scipy import stats

# Total screen time calculation (sum across all activities)
dataset2['total_screen_time'] = dataset2[['C_we', 'C_wk', 'G_we', 'G_wk', 'S_we', 'S_wk', 'T_we', 'T_wk']].sum(axis=1)

# Merge minority status from dataset1
screen_time_with_minority = pd.merge(dataset1[['ID', 'minority']], dataset2[['ID', 'total_screen_time']], on='ID')

# Separate groups: minority vs majority
minority_group = screen_time_with_minority[screen_time_with_minority['minority'] == 1]['total_screen_time']
majority_group = screen_time_with_minority[screen_time_with_minority['minority'] == 0]['total_screen_time']

# Independent T-test
t_stat, p_val = stats.ttest_ind(minority_group, majority_group)
print("T-statistic: ", t_stat)
print("P-value: ", p_val)

"""**Investigation 2: Screen Time and Well-being Correlation**"""

# Merge dataset2 and dataset3 on ID
merged_data = pd.merge(dataset2[['ID', 'total_screen_time']], dataset3, on='ID')

# Calculate Pearson correlation between total screen time and well-being indicators
correlation_matrix = merged_data.corr()

print(correlation_matrix[['total_screen_time']])

# Visualization: Heatmap of correlations
plt.figure(figsize=(10, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)
plt.title('Correlation Matrix: Screen Time and Well-being Indicators')
plt.show()

"""# **Data** **Exploration**"""

import pandas as pd

# Load the datasets
dataset1 = pd.read_csv('/content/sample_data/dataset1.csv')
dataset2 = pd.read_csv('/content/sample_data/dataset2.csv')
dataset3 = pd.read_csv('/content/sample_data/dataset3.csv')

# Check the first few rows of each dataset
print("Dataset 1 - Demographics:\n", dataset1.head())
print("\nDataset 2 - Screen Time:\n", dataset2.head())
print("\nDataset 3 - Well-being Indicators:\n", dataset3.head())

# Check for missing values
print("\nMissing values in dataset1:\n", dataset1.isnull().sum())
print("\nMissing values in dataset2:\n", dataset2.isnull().sum())
print("\nMissing values in dataset3:\n", dataset3.isnull().sum())

# Summary statistics for each dataset
print("\nSummary of Dataset 1:\n", dataset1.describe())
print("\nSummary of Dataset 2:\n", dataset2.describe())
print("\nSummary of Dataset 3:\n", dataset3.describe())

"""# **Data Visualisation**"""

#Visualizing Demographics
import matplotlib.pyplot as plt
import seaborn as sns

# Gender Distribution
sns.countplot(x='gender', data=dataset1)
plt.title('Gender Distribution')
plt.show()

# Minority and Deprived Status
fig, ax = plt.subplots(1, 2, figsize=(12, 6))
sns.countplot(x='minority', data=dataset1, ax=ax[0])
ax[0].set_title('Minority Distribution')

sns.countplot(x='deprived', data=dataset1, ax=ax[1])
ax[1].set_title('Deprived Distribution')

plt.tight_layout()
plt.show()

#Visualizing Digital Screen Time (weekdays vs. weekends)
# Visualize screen time for weekends vs. weekdays
weekend_cols = ['C_we', 'G_we', 'S_we', 'T_we']
weekday_cols = ['C_wk', 'G_wk', 'S_wk', 'T_wk']

dataset2[weekend_cols].mean().plot(kind='bar', color='blue', alpha=0.6)
plt.title('Average Screen Time on Weekends')
plt.ylabel('Hours')
plt.show()

dataset2[weekday_cols].mean().plot(kind='bar', color='green', alpha=0.6)
plt.title('Average Screen Time on Weekdays')
plt.ylabel('Hours')
plt.show()

"""# **Linear Regression Modelling**"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Prepare data for linear regression
# List of expected well-being columns
wellbeing_columns = ['Optm', 'Usef', 'Relx', 'Intp', 'Engs', 'Dealpr', 'Thkclr', 'Goodme', 'Clsep', 'Conf', 'Mkmind', 'Loved', 'Intthg', 'Cheer']

# Check if all well-being columns are present, remove missing columns from the list
wellbeing_columns = [col for col in wellbeing_columns if col in dataset3.columns]

# Create a total well-being score (sum of all available well-being indicators)
dataset3['total_wellbeing'] = dataset3[wellbeing_columns].sum(axis=1)

# Calculate total screen time for weekends and weekdays in dataset2
dataset2['total_we'] = dataset2[['C_we', 'G_we', 'S_we', 'T_we']].sum(axis=1)
dataset2['total_wk'] = dataset2[['C_wk', 'G_wk', 'S_wk', 'T_wk']].sum(axis=1)

# Merge datasets: screen time, demographics, and well-being data
regression_data = pd.merge(dataset2[['ID', 'total_we', 'total_wk']], dataset1[['ID', 'gender', 'minority', 'deprived']], on='ID')
regression_data = pd.merge(regression_data, dataset3[['ID', 'total_wellbeing']], on='ID')

# Define features (X) and target (y)
X = regression_data[['total_we', 'total_wk', 'gender', 'minority', 'deprived']]
y = regression_data['total_wellbeing']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")